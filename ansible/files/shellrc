#!/bin/bash
#
export HOME_CONDA=0
export USR_LOCAL_CONDA=0
export ENABLE_DEVICONS=0

if [ -f $HOME/.localrc ] ;
then
    . $HOME/.localrc;
fi

set -o vi
export EDITOR='nvim'
export GIT_EDITOR='nvim'

alias ls="ls --color"
alias l.="ls -d .*"
alias la="ls -a"
alias ll="ls -al"
alias tl="tmux list-sessions"
alias grep="grep --color"
alias ..="cd .."
alias ...="cd ../.."
alias journalwatch='sudo journalctl -f'
alias nvimrc='nvim ~/.config/nvim/init.vim'
alias docker='sudo docker'
alias pc='podman-compose'
alias jpl='__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia jupyter lab'
alias pacman='sudo pacman'
alias taif='tail -f'
alias spotify="/usr/bin/spotify --force-device-scale-factor=2"
alias ghist="history | grep -i "
alias wiki='vi +"VimwikiIndex"'

home_conda() {
    if [[ -d $HOME/miniconda3 ]]
    then
        export PATH=$PATH:/home/akail/miniconda3/bin;
        . /home/akail/miniconda3/etc/profile.d/conda.sh;
    fi
}

usr_local_conda() {
    if [[ -d /usr/local/anaconda ]]
    then
        export PATH=$PATH:/usr/local/anaconda/bin;
        . /usr/local/anaconda/etc/profile.d/conda.sh;
    fi
}

# added by Anaconda3 4.3.1 installer
if [ "$HOME_CONDA" -eq "1" ]; then
    home_conda
fi

if [ "$USR_LOCAL_CONDA" -eq "1" ]; then
    usr_local_conda
fi

export PATH=/home/akail/code/Configs/scripts/:$PATH

# Set the fzf command to use fd instead of find.  Allows leveraging .gitignore in a directory
export FZF_DEFAULT_COMMAND='fd --type f'

#Functions
# This function will extract most common archives      
extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.xz)    tar xJf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)     echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

startssh() {
    eval "$(ssh-agent -s)"
    ssh-add ~/.ssh/id_rsa
}

wiki2df(){
    pandoc -f vimwiki -o $2 $1
}

cocvim(){
    OUTDIR=.vim
    mkdir -p $OUTDIR

    OUTPUT=$OUTDIR/coc-settings.json

    if [[ -f "$OUTPUT" ]]; then
        echo "$OUTPUT already exists. Aborting"
        return 1
    fi

    echo "{" > $OUTPUT
    echo "\"python.linting.enabled\": true," >> $OUTPUT

    # Set python interpreter
    python=`which python 2>/dev/null`
    if [ $? -eq 0 ]; then
        echo "Found python interpreter"
        echo "\"python.pythonPath\": \"$python\"," >> $OUTPUT
    fi

    # find black
    black=`which black 2>/dev/null`
    if [ $? -eq 0 ]; then
        echo "Found black"
        echo "\"python.formatting.provider\": \"black\"," >> $OUTPUT
        echo "\"python.formatting.blackPath\": \"$black\"," >> $OUTPUT
        
    fi

    # find flake8
    flake8=`which flake8 2>/dev/null`
    if [ $? -eq 0 ]; then
        echo "Found flake8"
        echo "\"python.linting.flake8Enabled\": true," >> $OUTPUT
        echo "\"python.linting.flake8Path\": \"$flake8\"," >> $OUTPUT
    fi

    # find bandit
    bandit=`which bandit 2>/dev/null`
    if [ $? -eq 0 ]; then
        echo "Found bandit"
        echo "\"python.linting.banditEnabled\": true," >> $OUTPUT
        echo "\"python.linting.banditPath\": \"$bandit\"," >> $OUTPUT
    fi
    pydocstyle=`which pydocstyle 2>/dev/null`
    if [ $? -eq 0 ]; then
        echo "Found pydocstyle"
        echo "\"python.linting.pydocstyleEnabled\": true," >> $OUTPUT
        echo "\"python.linting.pydocstylePath\": \"$pydocstyle\"," >> $OUTPUT
    fi

    echo "\"python.linting.pylintEnabled\": false" >> $OUTPUT
    echo "}" >> $OUTPUT
}

_copy(){
    cat | xclip -selection clipboard
}

_paste(){
    xclip -selection clipboard -o
}

export PATH=$HOME/bin:$PATH


